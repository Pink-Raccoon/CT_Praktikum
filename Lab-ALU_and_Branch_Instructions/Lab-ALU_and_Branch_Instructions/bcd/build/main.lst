


ARM Macro Assembler    Page 1 


    1 00000000         ; ------------------------------------------------------
                       ------------
    2 00000000         ; --  _____       ______  _____                         
                                  -
    3 00000000         ; -- |_   _|     |  ____|/ ____|                        
                                  -
    4 00000000         ; --   | |  _ __ | |__  | (___    Institute of Embedded 
                       Systems    -
    5 00000000         ; --   | | | '_ \|  __|  \___ \   Zurich University of  
                                  -
    6 00000000         ; --  _| |_| | | | |____ ____) |  Applied Sciences      
                                  -
    7 00000000         ; -- |_____|_| |_|______|_____/   8401 Winterthur, Switz
                       erland     -
    8 00000000         ; ------------------------------------------------------
                       ------------
    9 00000000         ; --
   10 00000000         ; -- main.s
   11 00000000         ; --
   12 00000000         ; -- CT1 P06 "ALU und Sprungbefehle" mit MUL
   13 00000000         ; --
   14 00000000         ; -- $Id: main.s 4857 2019-09-10 17:30:17Z akdi $
   15 00000000         ; ------------------------------------------------------
                       ------------
   16 00000000         ;Directives
   17 00000000                 PRESERVE8
   18 00000000                 THUMB
   19 00000000         
   20 00000000         ; ------------------------------------------------------
                       ------------
   21 00000000         ; -- Address Defines
   22 00000000         ; ------------------------------------------------------
                       ------------
   23 00000000         
   24 00000000 60000100 
                       ADDR_LED_15_0
                               EQU              0x60000100
   25 00000000 60000102 
                       ADDR_LED_31_16
                               EQU              0x60000102
   26 00000000 60000200 
                       ADDR_DIP_SWITCH_7_0
                               EQU              0x60000200
   27 00000000 60000201 
                       ADDR_DIP_SWITCH_15_8
                               EQU              0x60000201
   28 00000000 60000114 
                       ADDR_7_SEG_BIN_DS3_0
                               EQU              0x60000114
   29 00000000 60000210 
                       ADDR_BUTTONS
                               EQU              0x60000210
   30 00000000         
   31 00000000 60000340 
                       ADDR_LCD_RED
                               EQU              0x60000340
   32 00000000 60000342 
                       ADDR_LCD_GREEN
                               EQU              0x60000342



ARM Macro Assembler    Page 2 


   33 00000000 60000344 
                       ADDR_LCD_BLUE
                               EQU              0x60000344
   34 00000000 0000FFFF 
                       LCD_BACKLIGHT_FULL
                               EQU              0xffff
   35 00000000 00000000 
                       LCD_BACKLIGHT_OFF
                               EQU              0x0000
   36 00000000         
   37 00000000         
   38 00000000         
   39 00000000         ; ------------------------------------------------------
                       ------------
   40 00000000         ; -- myCode
   41 00000000         ; ------------------------------------------------------
                       ------------
   42 00000000                 AREA             myCode, CODE, READONLY
   43 00000000         
   44 00000000                 ENTRY
   45 00000000         
   46 00000000         main    PROC
   47 00000000                 export           main
   48 00000000         
   49 00000000         ; STUDENTS: To be programmed
   50 00000000         ; read first dipswitch array (ONES)
   51 00000000 4829            LDR              R0, =ADDR_DIP_SWITCH_7_0
   52 00000002 7806            LDRB             R6, [R0]
   53 00000004         
   54 00000004         ; read second dipswitch array (TENS)
   55 00000004 4829            LDR              R0, =ADDR_DIP_SWITCH_15_8
   56 00000006 7807            LDRB             R7, [R0]
   57 00000008         
   58 00000008         ; display BCD TENS and BCD ONES, result of this shall be
                        in R5
   59 00000008 013D            LSLS             R5, R7, #4
   60 0000000A 4335            ORRS             R5, R5, R6
   61 0000000C         
   62 0000000C 4828            LDR              R0, =ADDR_LED_15_0
   63 0000000E 7005            STRB             R5, [R0]
   64 00000010         
   65 00000010         ; prepare and display result in binary (result in R4)
   66 00000010         
   67 00000010         
   68 00000010 003C            MOVS             R4, R7
   69 00000012         
   70 00000012         ; if button is pressed jump to else
   71 00000012 4928            LDR              R1, =ADDR_BUTTONS
   72 00000014 680A            LDR              R2, [R1]
   73 00000016 2101            MOVS             R1, #1
   74 00000018 400A            ANDS             R2, R2, R1
   75 0000001A         
   76 0000001A 2A00            CMP              R2, #0      ;if button is OFF
   77 0000001C D007            BEQ              go_else
   78 0000001E         
   79 0000001E         ;if body
   80 0000001E         
   81 0000001E 4826            LDR              R0, =ADDR_LCD_RED
   82 00000020 4926            LDR              R1, =LCD_BACKLIGHT_FULL



ARM Macro Assembler    Page 3 


   83 00000022 8001            STRH             R1, [R0]
   84 00000024         
   85 00000024 0063            LSLS             R3, R4, #1
   86 00000026 00E2            LSLS             R2, R4, #3
   87 00000028 189C            ADDS             R4, R3, R2
   88 0000002A         
   89 0000002A 4825            LDR              R0, =go_here
   90 0000002C 4700            BX               R0
   91 0000002E         ; endif
   92 0000002E         
   93 0000002E         
   94 0000002E 200A    go_else MOVS             R0, #10
   95 00000030 4344            MULS             R4, R0, R4
   96 00000032         
   97 00000032 4824            LDR              R0, =ADDR_LCD_BLUE
   98 00000034 4921            LDR              R1, =LCD_BACKLIGHT_FULL
   99 00000036 8001            STRH             R1, [R0]
  100 00000038         ; ende else
  101 00000038         
  102 00000038 19A4    go_here ADDS             R4, R4, R6
  103 0000003A         
  104 0000003A 481D            LDR              R0, =ADDR_LED_15_0
  105 0000003C 7044            STRB             R4, [R0, #1]
  106 0000003E         
  107 0000003E         ; prepare same result (in R4) to seven segment display
  108 0000003E 4822            LDR              R0, =ADDR_7_SEG_BIN_DS3_0
  109 00000040 7005            STRB             R5, [R0]
  110 00000042 7044            STRB             R4, [R0, #1]
  111 00000044         
  112 00000044         
  113 00000044         ; count bits
  114 00000044         
  115 00000044 2007            MOVS             R0, #7      ; loop variable
  116 00000046 2100            MOVS             R1, #0      ; counter
  117 00000048 4B20            LDR              R3, =cond
  118 0000004A         
  119 0000004A E004            B                cond
  120 0000004C         
  121 0000004C         loop1
  122 0000004C 3801            SUBS             R0, #1      ; minus one for loo
                                                            p var
  123 0000004E         
  124 0000004E 0864            LSRS             R4, #1      ; shift oneo to the
                                                             right
  125 00000050         ;check condition
  126 00000050 D200            BCS              carySet
  127 00000052         ; else
  128 00000052 4718            BX               R3
  129 00000054         ; if condition true
  130 00000054         carySet
  131 00000054 3101            ADDS             R1, #1      ; add one to counte
                                                            r
  132 00000056         
  133 00000056         cond
  134 00000056 2800            CMP              R0, #0
  135 00000058 D1F8            BNE              loop1
  136 0000005A         
  137 0000005A         
  138 0000005A         



ARM Macro Assembler    Page 4 


  139 0000005A         ; display amount of einsen (amount in R1)
  140 0000005A         
  141 0000005A         
  142 0000005A         
  143 0000005A         ; if amount of einsen is zero, skip
  144 0000005A 2900            CMP              R1, #0
  145 0000005C D008            BEQ              skip1
  146 0000005E         ; else make a 1
  147 0000005E 2201            MOVS             R2, #1      ; RESULT IN R2
  148 00000060         ; and left shift it as much as amount of einsen (for loo
                       p)
  149 00000060 0008            MOVS             R0, R1      ; loop variable!!!
  150 00000062         
  151 00000062 E002            B                cond2
  152 00000064         loop2
  153 00000064 2301            MOVS             R3, #1
  154 00000066 409A            LSLS             R2, R2, R3  ;shift one to da le
                                                            ft
  155 00000068 1C52            ADDS             R2, R2, #1
  156 0000006A         
  157 0000006A         cond2
  158 0000006A 3801            SUBS             R0, #1      ; minus one for loo
                                                            p var
  159 0000006C 2800            CMP              R0, #0      ; is loop over?
  160 0000006E D1F9            BNE              loop2       ; if not, go to nex
                                                            t iteration of loop
                                                            
  161 00000070         
  162 00000070         skip1
  163 00000070         
  164 00000070         ; as many ones in R2 as needed to display the bar
  165 00000070 4E17            LDR              R6, =ADDR_LED_31_16
  166 00000072         
  167 00000072         
  168 00000072         ; rotate stuff
  169 00000072 0413            LSLS             R3, R2, #16 ; shift halfword to
                                                             the left
  170 00000074 4313            ORRS             R3, R3, R2  ; duplicate  RESULT
                                                             IN R3
  171 00000076         
  172 00000076         
  173 00000076         
  174 00000076         ; loop 16 times with pauses
  175 00000076 2001            MOVS             R0, #1      ; 1
  176 00000078 2110            MOVS             R1, #16     ; loop variable
  177 0000007A         
  178 0000007A E003            B                cond3
  179 0000007C         loop3
  180 0000007C 41C3            RORS             R3, R3, R0  ; rotate 1
  181 0000007E 3901            SUBS             R1, #1      ; minus one for loo
                                                            p var
  182 00000080 F7FF FFFE       BL               pause       ; take break
  183 00000084         
  184 00000084         cond3
  185 00000084 8033            STRH             R3, [R6]    ; display the bar
  186 00000086 2900            CMP              R1, #0      ; is loop over?
  187 00000088 D1F8            BNE              loop3       ; if not, go to nex
                                                            t iteration of loop
                                                            



ARM Macro Assembler    Page 5 


  188 0000008A         
  189 0000008A         ; turn off lcd
  190 0000008A 480E            LDR              R0, =ADDR_LCD_BLUE
  191 0000008C 4911            LDR              R1, =LCD_BACKLIGHT_OFF
  192 0000008E 8001            STRH             R1, [R0]
  193 00000090         
  194 00000090 4809            LDR              R0, =ADDR_LCD_RED
  195 00000092 4910            LDR              R1, =LCD_BACKLIGHT_OFF
  196 00000094 8001            STRH             R1, [R0]
  197 00000096         
  198 00000096         
  199 00000096         
  200 00000096         
  201 00000096         
  202 00000096         
  203 00000096         
  204 00000096         ; END: To be programmed
  205 00000096         
  206 00000096 E7FE            B                main
  207 00000098                 ENDP
  208 00000098         
  209 00000098         ;----------------------------------------------------
  210 00000098         ; Subroutines
  211 00000098         ;----------------------------------------------------
  212 00000098         
  213 00000098         ;----------------------------------------------------
  214 00000098         ; pause for disco_lights
  215 00000098         pause   PROC
  216 00000098 B403            PUSH             {R0, R1}
  217 0000009A 490F            LDR              R1, =1
  218 0000009C 480F            LDR              R0, =0x000FFFFF
  219 0000009E         
  220 0000009E         loop
  221 0000009E 1A40            SUBS             R0, R0, R1
  222 000000A0 D2FD            BCS              loop
  223 000000A2         
  224 000000A2 BC03            POP              {R0, R1}
  225 000000A4 4770            BX               LR
  226 000000A6 00 00           ALIGN
  227 000000A8                 ENDP
  228 000000A8         
  229 000000A8         ; ------------------------------------------------------
                       ------------
  230 000000A8         ; End of code
  231 000000A8         ; ------------------------------------------------------
                       ------------
  232 000000A8                 END
              60000200 
              60000201 
              60000100 
              60000210 
              60000340 
              0000FFFF 
              00000000 
              60000344 
              60000114 
              00000000 
              60000102 
              00000000 



ARM Macro Assembler    Page 6 


              00000001 
              000FFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --depend=.\bu
ild\main.d -o.\build\main.o -I.\RTE\_Target_1 -IC:\Users\Asha\AppData\Local\Arm
\Packs\InES\CTBoard14_DFP\4.0.2\Device\Include -IC:\Users\Asha\AppData\Local\Ar
m\Packs\InES\CTBoard14_DFP\4.0.2\Device\Include\m0 -IC:\Users\Asha\AppData\Loca
l\Arm\Packs\InES\CTBoard14_DFP\4.0.2\HAL\Include --predefine="__EVAL SETA 1" --
predefine="__UVISION_VERSION SETA 537" --predefine="_RTE_ SETA 1" --predefine="
_RTE_ SETA 1" --list=.\build\main.lst app\main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

carySet 00000054

Symbol: carySet
   Definitions
      At line 130 in file app\main.s
   Uses
      At line 126 in file app\main.s
Comment: carySet used once
cond 00000056

Symbol: cond
   Definitions
      At line 133 in file app\main.s
   Uses
      At line 117 in file app\main.s
      At line 119 in file app\main.s

cond2 0000006A

Symbol: cond2
   Definitions
      At line 157 in file app\main.s
   Uses
      At line 151 in file app\main.s
Comment: cond2 used once
cond3 00000084

Symbol: cond3
   Definitions
      At line 184 in file app\main.s
   Uses
      At line 178 in file app\main.s
Comment: cond3 used once
go_else 0000002E

Symbol: go_else
   Definitions
      At line 94 in file app\main.s
   Uses
      At line 77 in file app\main.s
Comment: go_else used once
go_here 00000038

Symbol: go_here
   Definitions
      At line 102 in file app\main.s
   Uses
      At line 89 in file app\main.s
Comment: go_here used once
loop 0000009E

Symbol: loop
   Definitions
      At line 220 in file app\main.s
   Uses
      At line 222 in file app\main.s
Comment: loop used once
loop1 0000004C




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: loop1
   Definitions
      At line 121 in file app\main.s
   Uses
      At line 135 in file app\main.s
Comment: loop1 used once
loop2 00000064

Symbol: loop2
   Definitions
      At line 152 in file app\main.s
   Uses
      At line 160 in file app\main.s
Comment: loop2 used once
loop3 0000007C

Symbol: loop3
   Definitions
      At line 179 in file app\main.s
   Uses
      At line 187 in file app\main.s
Comment: loop3 used once
main 00000000

Symbol: main
   Definitions
      At line 46 in file app\main.s
   Uses
      At line 47 in file app\main.s
      At line 206 in file app\main.s

myCode 00000000

Symbol: myCode
   Definitions
      At line 42 in file app\main.s
   Uses
      None
Comment: myCode unused
pause 00000098

Symbol: pause
   Definitions
      At line 215 in file app\main.s
   Uses
      At line 182 in file app\main.s
Comment: pause used once
skip1 00000070

Symbol: skip1
   Definitions
      At line 162 in file app\main.s
   Uses
      At line 145 in file app\main.s
Comment: skip1 used once
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ADDR_7_SEG_BIN_DS3_0 60000114

Symbol: ADDR_7_SEG_BIN_DS3_0
   Definitions
      At line 28 in file app\main.s
   Uses
      At line 108 in file app\main.s
Comment: ADDR_7_SEG_BIN_DS3_0 used once
ADDR_BUTTONS 60000210

Symbol: ADDR_BUTTONS
   Definitions
      At line 29 in file app\main.s
   Uses
      At line 71 in file app\main.s
Comment: ADDR_BUTTONS used once
ADDR_DIP_SWITCH_15_8 60000201

Symbol: ADDR_DIP_SWITCH_15_8
   Definitions
      At line 27 in file app\main.s
   Uses
      At line 55 in file app\main.s
Comment: ADDR_DIP_SWITCH_15_8 used once
ADDR_DIP_SWITCH_7_0 60000200

Symbol: ADDR_DIP_SWITCH_7_0
   Definitions
      At line 26 in file app\main.s
   Uses
      At line 51 in file app\main.s
Comment: ADDR_DIP_SWITCH_7_0 used once
ADDR_LCD_BLUE 60000344

Symbol: ADDR_LCD_BLUE
   Definitions
      At line 33 in file app\main.s
   Uses
      At line 97 in file app\main.s
      At line 190 in file app\main.s

ADDR_LCD_GREEN 60000342

Symbol: ADDR_LCD_GREEN
   Definitions
      At line 32 in file app\main.s
   Uses
      None
Comment: ADDR_LCD_GREEN unused
ADDR_LCD_RED 60000340

Symbol: ADDR_LCD_RED
   Definitions
      At line 31 in file app\main.s
   Uses
      At line 81 in file app\main.s
      At line 194 in file app\main.s

ADDR_LED_15_0 60000100



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: ADDR_LED_15_0
   Definitions
      At line 24 in file app\main.s
   Uses
      At line 62 in file app\main.s
      At line 104 in file app\main.s

ADDR_LED_31_16 60000102

Symbol: ADDR_LED_31_16
   Definitions
      At line 25 in file app\main.s
   Uses
      At line 165 in file app\main.s
Comment: ADDR_LED_31_16 used once
LCD_BACKLIGHT_FULL 0000FFFF

Symbol: LCD_BACKLIGHT_FULL
   Definitions
      At line 34 in file app\main.s
   Uses
      At line 82 in file app\main.s
      At line 98 in file app\main.s

LCD_BACKLIGHT_OFF 00000000

Symbol: LCD_BACKLIGHT_OFF
   Definitions
      At line 35 in file app\main.s
   Uses
      At line 191 in file app\main.s
      At line 195 in file app\main.s

11 symbols
360 symbols in table
